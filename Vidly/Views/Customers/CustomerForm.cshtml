@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

@using (Html.BeginForm("Save", "Customers")) {
    <div class="form-group">
        @Html.LabelFor(x => x.Customer.Name)
        @Html.TextBoxFor(x => x.Customer.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Customer.Name)
    </div>
    <div class="form-group">
        @*@Html.LabelFor(x => x.Customer.MembershipType)*@
        <label for="Customer_MembershipTypeId">Membership Type</label>
        @Html.DropDownListFor(x => x.Customer.MembershipTypeId, new SelectList(Model.MembershipTypes, "Id", "Name"), "Select Membership Type", new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @*@Html.LabelFor(x => x.DateOfBirth)*@
        <label for="Customer_DateOfBirth">Date of Birth</label>
        @Html.TextBoxFor(x => x.Customer.DateOfBirth, "{0:d}", new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Customer.DateOfBirth)
    </div>
    <div class="checkbox">
        <label>
            @Html.CheckBoxFor(x => x.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter?
        </label>
    </div>
    //Need this data point but don't want to display it (need to pass Id from Model, otherwise the form
    // will pass an empty string which will fail on validation)
    @Html.HiddenFor(m => m.Customer.Id, new { @Value = Model.Customer.Id })
    //Anti Cross Site Request Forgery (CSRF) attack token
    @Html.AntiForgeryToken()
    <button type="submit" class="btn btn-primary">Save</button>
}

@section scripts
{
    @*The enables client side validation and uses the bundle in: BundleConfig*@
    @* A __RequestVerificationToken is added as a hidden field to the form and is paired with a cookie 
        with same Name but the token is encrypted. The server then compares both to confirm the request
        came from the correct form, otherwise it is considered as an attack.*@
    @Scripts.Render("~/bundles/jqueryval")
}